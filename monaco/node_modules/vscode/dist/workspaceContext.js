import './polyfill.js';
import { u as unsupported } from './missing-services.js';
import { S as Services } from './services2.js';
import { IWorkspaceContextService, WorkspaceFolder } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { Event } from 'monaco-editor/esm/vs/base/common/event.js';
class SimpleWorkspaceContextService {
    constructor() {
        this.onDidChangeWorkspaceName = Event.None;
        this.onWillChangeWorkspaceFolders = Event.None;
        this.onDidChangeWorkspaceFolders = Event.None;
        this.onDidChangeWorkbenchState = Event.None;
        this.isCurrentWorkspace = unsupported;
    }
    getCompleteWorkspace() {
        return Promise.resolve(this.getWorkspace());
    }
    getWorkspace() {
        const workspaceFolders = Services.get().workspace?.workspaceFolders;
        return {
            id: '4064f6ec-cb38-4ad0-af64-ee6467e63c82',
            folders: workspaceFolders?.map(folder => new WorkspaceFolder(folder)) ?? []
        };
    }
    getWorkbenchState() {
        const workspaceFoldersCount = Services.get().workspace?.workspaceFolders?.length ?? 1;
        if (workspaceFoldersCount === 0) {
            return 1 ;
        }
        else if (workspaceFoldersCount === 1) {
            return 2 ;
        }
        else {
            return 3 ;
        }
    }
    getWorkspaceFolder(resource) {
        const workspace = this.getWorkspace();
        return workspace.folders.find(folder => folder.uri.scheme === resource.scheme && resource.path.startsWith(folder.uri.path)) ?? null;
    }
    isInsideWorkspace(resource) {
        return this.getWorkspaceFolder(resource) != null;
    }
}
function getServiceOverride() {
    return {
        [( IWorkspaceContextService.toString())]: new SyncDescriptor(SimpleWorkspaceContextService)
    };
}
export { getServiceOverride as g };
