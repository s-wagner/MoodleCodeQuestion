import { o as onServicesInitialized } from './polyfill.js';
import './missing-services.js';
import { I as IWorkbenchLayoutService } from './layoutService.js';
import { E as Emitter } from './services2.js';
import { ILayoutService } from 'monaco-editor/esm/vs/platform/layout/browser/layoutService.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { Event } from 'monaco-editor/esm/vs/base/common/event.js';
import { getClientArea } from 'monaco-editor/esm/vs/base/browser/dom.js';
import { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';
import { ICodeEditorService } from 'monaco-editor/esm/vs/editor/browser/services/codeEditorService.js';
class LayoutService {
    constructor(container) {
        this.container = container;
        this.onDidChangePartVisibility = Event.None;
        this.offset = { top: 0, quickPickTop: 0 };
        this._onDidLayout = new Emitter();
        this.onDidLayout = this._onDidLayout.event;
        window.addEventListener('resize', () => this.layout());
        this.layout();
    }
    isVisible() {
        return false;
    }
    get dimension() { return this._dimension; }
    layout() {
        this._dimension = getClientArea(window.document.body);
        this._onDidLayout.fire(this._dimension);
    }
    get hasContainer() {
        return true;
    }
    focus() {
        StandaloneServices.get(ICodeEditorService).getFocusedCodeEditor()?.focus();
    }
}
function initialize(instantiationService) {
    const container = instantiationService.invokeFunction((accessor) => accessor.get(ILayoutService)).container;
    container.classList.add('monaco-workbench');
}
function getServiceOverride(container = document.body) {
    onServicesInitialized(initialize);
    return {
        [( ILayoutService.toString())]: new SyncDescriptor(LayoutService, [container]),
        [( IWorkbenchLayoutService.toString())]: new SyncDescriptor(LayoutService, [container])
    };
}
export { getServiceOverride as g };
