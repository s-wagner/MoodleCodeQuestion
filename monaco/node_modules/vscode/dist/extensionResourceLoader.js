import { generateUuid } from 'monaco-editor/esm/vs/base/common/uuid.js';
import { VSBuffer } from 'monaco-editor/esm/vs/base/common/buffer.js';
import { cq as getRemoteServerRootPath, h as format2, s as supportsTelemetry, cr as getTelemetryLevel } from './missing-services.js';
import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { RemoteAuthorities } from 'monaco-editor/esm/vs/base/common/network.js';
import { isWeb } from 'monaco-editor/esm/vs/base/common/platform.js';
const _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
function isUUID(value) {
    return _UUIDPattern.test(value);
}
async function getServiceMachineId(environmentService, fileService, storageService) {
    let uuid = storageService ? storageService.get('storage.serviceMachineId', -1 ) || null : null;
    if (uuid) {
        return uuid;
    }
    try {
        const contents = await fileService.readFile(environmentService.serviceMachineIdResource);
        const value = ( contents.value.toString());
        uuid = isUUID(value) ? value : null;
    }
    catch (e) {
        uuid = null;
    }
    if (!uuid) {
        uuid = generateUuid();
        try {
            await fileService.writeFile(environmentService.serviceMachineIdResource, VSBuffer.fromString(uuid));
        }
        catch (error) {
        }
    }
    storageService?.store('storage.serviceMachineId', uuid, -1 , 1 );
    return uuid;
}
const WEB_EXTENSION_RESOURCE_END_POINT = 'web-extension-resource';
const IExtensionResourceLoaderService = ( createDecorator('extensionResourceLoaderService'));
class AbstractExtensionResourceLoaderService {
    constructor(_fileService, _storageService, _productService, _environmentService, _configurationService) {
        this._fileService = _fileService;
        this._storageService = _storageService;
        this._productService = _productService;
        this._environmentService = _environmentService;
        this._configurationService = _configurationService;
        this._webExtensionResourceEndPoint = `${getRemoteServerRootPath(_productService)}/${WEB_EXTENSION_RESOURCE_END_POINT}/`;
        if (_productService.extensionsGallery) {
            this._extensionGalleryResourceUrlTemplate = _productService.extensionsGallery.resourceUrlTemplate;
            this._extensionGalleryAuthority = this._extensionGalleryResourceUrlTemplate ? this._getExtensionGalleryAuthority(( URI.parse(this._extensionGalleryResourceUrlTemplate))) : undefined;
        }
    }
    get supportsExtensionGalleryResources() {
        return this._extensionGalleryResourceUrlTemplate !== undefined;
    }
    getExtensionGalleryResourceURL(galleryExtension, path) {
        if (this._extensionGalleryResourceUrlTemplate) {
            const uri = ( URI.parse(
                format2(this._extensionGalleryResourceUrlTemplate, { publisher: galleryExtension.publisher, name: galleryExtension.name, version: galleryExtension.version, path: 'extension' })
            ));
            return this._isWebExtensionResourceEndPoint(uri) ? uri.with({ scheme: RemoteAuthorities.getPreferredWebSchema() }) : uri;
        }
        return undefined;
    }
    isExtensionGalleryResource(uri) {
        return this._extensionGalleryAuthority && this._extensionGalleryAuthority === this._getExtensionGalleryAuthority(uri);
    }
    async getExtensionGalleryRequestHeaders() {
        const headers = {
            'X-Client-Name': `${this._productService.applicationName}${isWeb ? '-web' : ''}`,
            'X-Client-Version': this._productService.version
        };
        if (supportsTelemetry(this._productService, this._environmentService) && getTelemetryLevel(this._configurationService) === 3 ) {
            headers['X-Machine-Id'] = await this._getServiceMachineId();
        }
        if (this._productService.commit) {
            headers['X-Client-Commit'] = this._productService.commit;
        }
        return headers;
    }
    _getServiceMachineId() {
        if (!this._serviceMachineIdPromise) {
            this._serviceMachineIdPromise = getServiceMachineId(this._environmentService, this._fileService, this._storageService);
        }
        return this._serviceMachineIdPromise;
    }
    _getExtensionGalleryAuthority(uri) {
        if (this._isWebExtensionResourceEndPoint(uri)) {
            return uri.authority;
        }
        const index = uri.authority.indexOf('.');
        return index !== -1 ? uri.authority.substring(index + 1) : undefined;
    }
    _isWebExtensionResourceEndPoint(uri) {
        return uri.path.startsWith(this._webExtensionResourceEndPoint);
    }
}
export { AbstractExtensionResourceLoaderService as A, IExtensionResourceLoaderService as I };
