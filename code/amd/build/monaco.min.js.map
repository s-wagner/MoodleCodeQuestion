{"version":3,"file":"monaco.min.js","sources":["../src/monaco.js"],"sourcesContent":["export const init = ({ lang, url1, url2, text, mID, edit, intel, inline, keywords, variables, functions, classes, modules, tabsize}) => {\n    var script = window.document.createElement('script');\n    script.src = url1;\n    window.document.head.appendChild(script);\n\n    console.log(intel);\n    console.log(inline);\n    console.log(keywords);\n    console.log(variables);\n    console.log(functions);\n    console.log(classes);\n    console.log(modules);\n\n    text = text.replaceAll(\"&lt;\", \"<\");\n    text = text.replaceAll(\"&gt;\", \">\");\n    text = text.replaceAll(\"&amp;\", \"&\");\n    text = text.replaceAll(\"&quot;\", \"\\\"\");\n    text = text.replaceAll(\"&#039;\", \"\\'\");\n    text = text.replaceAll(\"&apos;\", \"\\'\");\n\n    require.config({ paths: { vs: url2 } });\n    require(['vs/editor/editor.main'], function () {\n        window.editor = monaco.editor.create(document.getElementById('containerMonaco' + mID), {\n            value: text,\n            language: lang,\n            readOnly: !edit,\n            tabSize: tabsize,\n        });\n\n        const suggestOptions = {\n            showInlineDetails: inline,\n            showKeywords: keywords,\n            showVariables: variables,\n            showFunctions: functions,\n            showClasses: classes,\n            showModules: modules,\n        };\n\n        window.editor.updateOptions({\n            quickSuggestions: intel,\n            suggestOnTriggerCharacters: intel,\n            suggest: suggestOptions,\n        });\n\n        monaco.languages.registerDocumentFormattingEditProvider('java', {\n            provideDocumentFormattingEdits(model, options) {\n                var formatted = javaBeautifier(model.getValue());\n                return [\n                    {\n                        range: model.getFullModelRange(),\n                        text: formatted\n                    }\n                ];\n            }\n        });\n\n        monaco.languages.registerDocumentFormattingEditProvider('sql', {\n            provideDocumentFormattingEdits(model, options) {\n                var formatted = sqlBeautifier(model.getValue());\n                return [\n                    {\n                        range: model.getFullModelRange(),\n                        text: formatted\n                    }\n                ];\n            }\n        });\n\n        monaco.languages.registerDocumentFormattingEditProvider('python', {\n            provideDocumentFormattingEdits(model, options) {\n                var formatted = pythonBeautifier(model.getValue());\n                return [\n                    {\n                        range: model.getFullModelRange(),\n                        text: formatted\n                    }\n                ];\n            }\n        });\n\n        monaco.languages.registerDocumentFormattingEditProvider('pascal', {\n            provideDocumentFormattingEdits(model, options) {\n                var formatted = beautifyPascal(model.getValue(), tabsize);\n                return [\n                    {\n                        range: model.getFullModelRange(),\n                        text: formatted\n                    }\n                ];\n            }\n        });\n\n        function format() {\n            window.editor.getAction('editor.action.formatDocument').run();\n        }\n\n        document.getElementById('formater').onclick = format;\n\n        if (edit) {\n            window.editor.getModel().onDidChangeContent((event) => {\n                let value = window.editor.getValue();\n                window.document.getElementById(mID).textContent = value;\n            });\n        }\n    });\n};\n\n\nfunction javaBeautifier(javaCode) {\n    const lines = javaCode.split('\\n');\n    let beautifiedCode = '';\n    let indentLevel = 0;\n\n    for (const line of lines) {\n        let trimmedLine = line.trim();\n\n        // Decrease indent level for closing braces.\n        if (trimmedLine.startsWith('}')) {\n            indentLevel--;\n        }\n\n        // Add appropriate indentation.\n        for (let i = 0; i < indentLevel; i++) {\n            beautifiedCode += '\\t';\n        }\n\n        // Add the line with indentation.\n        beautifiedCode += trimmedLine + '\\n';\n\n        // Increase indent level for opening braces.\n        if (trimmedLine.endsWith('{')) {\n            indentLevel++;\n        }\n    }\n\n    return beautifiedCode.trim();\n}\n\nfunction sqlBeautifier(sqlCode) {\n    const breakBeforeKeywords = [\n        'FROM', 'WHERE', 'GROUP BY', 'HAVING', 'ORDER BY', 'JOIN', 'INNER JOIN', 'LEFT JOIN', 'RIGHT JOIN', 'ON',\n        'INSERT INTO', 'VALUES', 'UPDATE', 'SET', 'DELETE FROM', 'CREATE TABLE', 'ALTER TABLE', 'DROP TABLE', 'UNION', 'UNION ALL',\n    ];\n\n    const regexStr = breakBeforeKeywords.map(kw => {\n        const words = kw.split(' ');\n        return words.map(w => `(?<=\\\\s|^)${w}(?=\\\\s|$)`).join('\\\\s+');\n    }).join('|');\n\n    const regex = new RegExp(regexStr, 'gi');\n\n    let beautifiedCode = sqlCode.replace(regex, match => `\\n${match}`);\n\n    // Remove leading newline if present\n    if (beautifiedCode.startsWith('\\n')) {\n        beautifiedCode = beautifiedCode.slice(1);\n    }\n\n    return removeBlankLines(beautifiedCode.trim());\n}\n\n\nfunction removeBlankLines(text) {\n    return text.replace(/^\\s*\\n/gm, '');\n}\n\nfunction pythonBeautifier(pythonCode) {\n    const lines = pythonCode.split('\\n');\n    let beautifiedCode = '';\n    let indentLevel = 0;\n    let consecutiveBlankLines = 0;\n\n    for (const line of lines) {\n        const trimmedLine = line.trim();\n\n        if (trimmedLine) {\n            // Check if the line starts with a de-indenting keyword.\n            const deIndentKeywords = ['else', 'elif', 'except', 'finally'];\n            const shouldDeIndent = deIndentKeywords.some(keyword => trimmedLine.startsWith(keyword));\n\n            if (shouldDeIndent) {\n                indentLevel--;\n            }\n\n            // Add appropriate indentation.\n            const indentation = ' '.repeat(4 * indentLevel);\n            beautifiedCode += indentation + trimmedLine + '\\n';\n\n            // Update the indent level.\n            if (trimmedLine.endsWith(':')) {\n                indentLevel++;\n            }\n\n            // Reset consecutive blank lines counter.\n            consecutiveBlankLines = 0;\n        } else {\n            consecutiveBlankLines++;\n\n            // Reset indent level after two consecutive blank lines.\n            if (consecutiveBlankLines === 2) {\n                indentLevel = 0;\n            }\n\n            // Preserve empty lines.\n            beautifiedCode += '\\n';\n        }\n    }\n\n    return beautifiedCode;\n}\n\nfunction beautifyPascal(code, tabSize) {\n    let indentLevel = 0;\n    const lines = code.split(\"\\n\");\n    let formattedLines = [];\n\n    lines.forEach((line) => {\n        const trimmedLine = line.trim().toLowerCase(); // convert to lowercase\n        if (trimmedLine.length > 0) {\n            // If line is not empty\n            if (\n                trimmedLine.startsWith(\"end\") ||\n                trimmedLine.startsWith(\"until\") ||\n                trimmedLine.startsWith(\"else\")\n            ) {\n                // Dedent one level for end, until, and else\n                indentLevel -= tabSize;\n            }\n            if(trimmedLine.startsWith(\"var\")){\n                indentLevel += tabSize;\n            }\n\n            formattedLines.push(\n                ' '.repeat(indentLevel) + line.trim().replace(/\\s+/g, \" \")\n            );\n\n            if(trimmedLine.startsWith(\"var\")){\n                indentLevel -= tabSize;\n            }\n\n            if (\n                trimmedLine.endsWith(\"begin\") ||\n                trimmedLine.endsWith(\"then\") ||\n                trimmedLine.includes(\"begin (*\") ||\n                trimmedLine.includes(\"then (*\") ||\n                trimmedLine.includes(\"begin //\") ||\n                trimmedLine.includes(\"then //\")\n            ) {\n                // Indent one level for begin and then\n                indentLevel += tabSize;\n            }\n        }\n    });\n\n    return formattedLines.join(\"\\n\");\n}"],"names":["_ref","lang","url1","url2","text","mID","edit","intel","inline","keywords","variables","functions","classes","modules","tabsize","script","window","document","createElement","src","head","appendChild","console","log","replaceAll","require","config","paths","vs","editor","monaco","create","getElementById","value","language","readOnly","tabSize","suggestOptions","showInlineDetails","showKeywords","showVariables","showFunctions","showClasses","showModules","updateOptions","quickSuggestions","suggestOnTriggerCharacters","suggest","languages","registerDocumentFormattingEditProvider","provideDocumentFormattingEdits","model","options","formatted","javaCode","lines","split","beautifiedCode","indentLevel","line","trimmedLine","trim","startsWith","i","endsWith","javaBeautifier","getValue","range","getFullModelRange","sqlCode","regexStr","map","kw","w","join","regex","RegExp","replace","match","slice","removeBlankLines","sqlBeautifier","pythonCode","consecutiveBlankLines","some","keyword","repeat","pythonBeautifier","code","formattedLines","forEach","toLowerCase","length","push","includes","beautifyPascal","onclick","getAction","run","getModel","onDidChangeContent","event","textContent"],"mappings":"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"}